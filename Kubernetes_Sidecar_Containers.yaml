# ********************************************* Scenario: Kubernetes Sidecar Containers *********************************************************

# We have a web server container running the nginx image. The access and error logs generated by the web server are not critical enough to be placed on a persistent volume. However, Nautilus developers need access to the last 24 hours of logs so that they can trace issues and bugs. Therefore, we need to ship the access and error logs for the web server to a log-aggregation service. Following the separation of concerns principle, we implement the Sidecar pattern by deploying a second container that ships the error and access logs from nginx. Nginx does one thing, and it does it well—serving web pages. The second container also specializes in its task—shipping logs. Since containers are running on the same Pod, we can use a shared emptyDir volume to read and write logs.

# Create a pod named webserver.

# Create an emptyDir volume shared-logs.

# Create two containers from nginx and ubuntu images with latest tag only and remember to mention tag i.e nginx:latest, nginx container name should be nginx-container and ubuntu container name should be sidecar-container on webserver pod.

# Add command on sidecar-container "sh","-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done"

# Mount the volume shared-logs on both containers at location /var/log/nginx, all containers should be up and running.

# Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

# -------------------------------------------------------------------------------------------------------------------------------------------
# 1. At first  kubectl  utility configure and working from jump server, run below commands 
# kubectl get all 

# 2.  Create yaml  file with all the parameters   

apiVersion: v1
kind: Pod
metadata:
  name: webserver
spec:
  containers:
  - image: nginx:latest
    name: nginx-container
    volumeMounts:
    - mountPath: /var/log/nginx
      name: shared-logs
  - image: ubuntu:latest
    name: sidecar-container
	command: ["sh"]
	args: ["-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done"]
    volumeMounts:
    - mountPath: /var/log/nginx
      name: shared-logs
  volumes:
  - name: shared-logs
    emptyDir: {}
	
# 3.  Run the below command to create a pod   	
# kubectl apply -f <file-name>

# 4.  Wait for  pods to get running status
# kubectl get pods

# 5. Validate the task by running below command
# kubectl describe pod <pod-name>

