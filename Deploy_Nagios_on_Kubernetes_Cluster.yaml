# *********************************************** Scenario: Deploy Nagios on Kubernetes *******************************************************

# The Nautilus DevOps team is planning to set up a Nagios monitoring tool to monitor some applications, services etc. They are planning to deploy it on Kubernetes cluster. Below you can find more details.

# 1) Create a deployment nagios-deployment for Nagios core. The container name must be nagios-container and it must use jasonrivers/nagios image.

# 2) Create a user and password for the Nagios core web interface, user must be xFusionCorp and password must be LQfKeWWxWD. (you can manually perform this step after deployment)

# 3) Create a service nagios-service for Nagios, which must be of targetPort type. nodePort must be 30008.

# You can use any labels as per your choice.

# Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.
# -------------------------------------------------------------------------------------------------------------------------------------------
# Solution:

# 1. Check existing running Pods  & Services 
#kubectl get all

#2. Create a YAML  file with all the parameters, Kindly do the changes as per task

# Deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nagios-deployment
  labels:
    app: nagios
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nagios
  template:
    metadata:
      labels:
        app: nagios
    spec:
      containers:
      - name: nagios-container
        image: jasonrivers/nagios
        ports:
        - containerPort: 80
---

# NodePort Service

apiVersion: v1
kind: Service
metadata:
  name: nagios-service
spec:
  type: NodePort
  selector:
    app: nagios
  ports:
      # By default and for convenience, the `targetPort` is set to the same value as the `port` field.
    - port: 80
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane will allocate a port from a range (default: 30000-32767)
      nodePort: 30008

# 3.  Run the below command to create a pod   	
# kubectl apply -f <file-name>

# 4.  Wait for  pods to get running status and exec into pod to create user
# kubectl get pods
# kubectl exec -it <pod-name>  -- /bin/bash
# htpasswd /opt/nagios/etc/htpasswd.users xFusionCorp
# Enter Password

# 5. Test the Newly created user

# In the pod command prompt execute the below command
# curl -u xFusionCorp http://localhost/

# 5. Click on Finish & Confirm to complete the task successful 

