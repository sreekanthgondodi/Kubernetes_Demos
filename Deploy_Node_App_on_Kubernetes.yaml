# ***************************************** Scenario: Deploy Node App on Kubernetes *******************************************************

# The Nautilus development team has completed development of one of the node applications, which they are planning to deploy on a Kubernetes cluster. They recently had a meeting with the DevOps team to share their requirements. Based on that, the DevOps team has listed out the exact requirements to deploy the app. Find below more details:

# Create a deployment using gcr.io/kodekloud/centos-ssh-enabled:node image, replica count must be 2.

# Create a service to expose this app, the service type must be NodePort, targetPort must be 8080 and nodePort should be 30012.

# Make sure all the pods are in Running state after the deployment.

# You can check the application by clicking on NodeApp button on top bar.

# You can use any labels as per your choice.

# Note: The kubectl on jump_host has been configured to work with the kubernetes cluster.
# -------------------------------------------------------------------------------------------------------------------------------------------
# Solution:

# 1. At first  kubectl  utility configure and working from jump server, run below commands 
# kubectl get all 

# 2. Create deployment with the specs given

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nautilus-deployment
  labels:
    app: next-gen
spec:
  replicas: 2
  selector:
    matchLabels:
      app: next-gen
  template:
    metadata:
      labels:
        app: next-gen
    spec:
      containers:
      - name: nautilus-container
        image: gcr.io/kodekloud/centos-ssh-enabled:node
		
		
# 3. Create service with the specs given

apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: next-gen
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30012		
	  
	  
# 4.  Run the below command to create a pod   	
# kubectl apply -f <deployment-file-name>
# kubectl apply -f <service-file-name>

# 4.  Wait for  pods to get running status
# kubectl get all

