# ****************************************** Scenario: Kubernetes Shared Volumes ****************************************************************

# We are working on an application that will be deployed on multiple containers within a pod on Kubernetes cluster. There is a requirement to share a volume among the containers to save some temporary data. The Nautilus DevOps team is developing a similar template to replicate the scenario. Below you can find more details about it.

# Create a pod named volume-share-devops.

# For the first container, use image fedora with latest tag only and remember to mention the tag i.e fedora:latest, container should be named as volume-container-devops-1, and run a sleep command for it so that it remains in running state. Volume volume-share should be mounted at path /tmp/beta.

# For the second container, use image fedora with the latest tag only and remember to mention the tag i.e fedora:latest, container should be named as volume-container-devops-2, and again run a sleep command for it so that it remains in running state. Volume volume-share should be mounted at path /tmp/games.

# Volume name should be volume-share of type emptyDir.

# After creating the pod, exec into the first container i.e volume-container-devops-1, and just for testing create a file beta.txt with any content under the mounted path of first container i.e /tmp/beta.

# The file beta.txt should be present under the mounted path /tmp/games on the second container volume-container-devops-2 as well, since they are using a shared volume.

# Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

# -------------------------------------------------------------------------------------------------------------------------------------------
# Solution:

# 1. At first  kubectl  utility configure and working from jump server, run below commands 
# kubectl get all 

# 2.  Create yaml  file with all the parameters  

apiVersion: v1
kind: Pod
metadata:
  name: volume-share-devops
spec:
  containers:
  - image: fedora:latest
    name: volume-container-devops-1
	command: ["sleep"]
	args: ["infinity"]
    volumeMounts:
    - mountPath: /tmp/beta
      name: volume-share
  - image: fedora:latest
    name: volume-container-devops-2
	command: ["sleep"]
	args: ["infinity"]
    volumeMounts:
    - mountPath: /tmp/games
      name: volume-share
  volumes:
  - name: volume-share
    emptyDir: {}
	
# 3.  Run the below command to create a pod   	
# kubectl apply -f <file-name>

# 4.  Wait for  pods to get running status
# kubectl get pods

# 5. Create test file in shared location and verify the file is accessed from other container shared path
# kubectl exec -i -t <pod-name> -c <container-name-1> -- sh
# echo "Hi there, this is a test file in shared location" >> /tmp/beta/beta.txt

# kubectl exec -i -t <pod-name> -c <container-name-2> -- sh
# cat /tmp/beta/beta.txt

